require("dotenv").config();const bcrypt=require("bcrypt");export function CreateUsersDB(db){db.exec("\n        CREATE TABLE IF NOT EXISTS roles(\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            name TEXT UNIQUE NOT NULL,\n            actions TEXT NOT NULL,\n            user_id INTEGER DEFAULT NULL,\n            create_at DATEIME DEFAULT CURRENT_TIMESTAMP\n            deleted_at DATEIME DEFAULT NULL\n            FOREIGN KEY(user_id) REFERENCES users(id),\n        );\n        \n        CREATE TABLE IF NOT EXISTS users(\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            username TEXT UNIQUE NOT NULL,\n            password TEXT NOT NULL,\n            roleId INTEGER DEFAULT NULL,\n            create_at DATEIME DEFAULT CURRENT_TIMESTAMP\n            deleted_at DATEIME DEFAULT NULL\n        );\n        \n        CREATE TABLE IF NOT EXISTS logs(\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            notes TEXT NOT NULL,\n            moduleid INTEGER DEFAULT NULL,\n            user_id INTEGER DEFAULT NULL,\n            deleted_at DATEIME DEFAULT CURRENT_TIMESTAMP\n            FOREIGN KEY(user_id) REFERENCES users(id),\n        )\n    ");const insertroles=db.prepare("INSERT INTO roles (name, actions) VALUES (@name, @action)");db.transaction((items=>{for(const item of items)insertroles.run(item)}))([{name:"admin",action:"create, modify, delete"},{name:"user",action:"create, modify"}]);if(db.prepare("SELECT * FROM users WHERE username = ?").get("admin"))console.log("Admin already exists.");else{const hash=bcrypt.hashSync(process.env.SEED_ADMIN_PASSWORD||"adminpass",10);db.prepare("INSERT INTO users (username, password, roleId) VALUES (?,?,?)").run("admin",hash,"1"),console.log("Seeded admin user: username=admin password="+(process.env.SEED_ADMIN_PASSWORD||"adminpass"))}}