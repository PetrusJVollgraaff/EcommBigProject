const{db:db}=require("../../../../db.js");var productDetailSQL="\nSELECT \n          P.id, \n          P.name, \n          P.description,\n          P.code,\n          P.instock,\n          P.onspecial,\n          P.showonline,\n          \n          --product main image\n          IFNULL(M.id, 0) AS imgid,\n          IFNULL(MU.id, 0) AS imgusedid,\n          CASE \n              WHEN M.id IS NOT NULL THEN\n                  '/static/images/'|| M.name ||'/medium'|| M.ext\n              ELSE ''\n          END AS imgpath,\n\n          --product normal prices\n          IFNULL(PP1.id, 0) AS normalpriceid,\n          IFNULL(PP1.price, 0.00) as normalprice,\n      \n          --product special prices\n          IFNULL(PP2.id, 0) AS specialpriceid,\n          IFNULL(PP2.price, 0.00) as specialprice,\n          PP2.specialdateStart,\n          PP2.specialdateEnd\n\n      FROM products AS P\n      LEFT JOIN media_used MU ON MU.id = P.mediaused_id AND MU.deleted_yn=0\n      LEFT JOIN media M ON M.id = MU.media_id AND M.deleted_yn=0\n      LEFT JOIN product_prices PP1 ON PP1.products_id = P.id AND PP1.isspecial=0 AND PP1.deleted_yn = 0\n      LEFT JOIN product_prices PP2 ON PP2.products_id = P.id AND PP2.isspecial=1 AND PP2.deleted_yn = 0          \n      WHERE P.deleted_yn = 0 AND P.showonline = 1\n";function CartTemplate(req,res){const carts=getCart(req);let total=0;const productsIds=carts.map(((item,idx)=>item.id)).join(","),products=db.prepare(`${productDetailSQL} AND P.id IN (${productsIds})`).all();return products.forEach(((item,idx)=>{var cartIdx=carts.findIndex((obj=>obj.id===item.id));item.qty=cartIdx>-1?Number(carts[cartIdx]?.qty):0,total+=item.qty*item.normalprice})),res.render("./frontend/pages/cartpages/cart",{title:"My E-commerce",layout:"frontend/layout/main",total:total,products:products})}function initCart(req){req.session.cart||(req.session.cart=[])}function addToCart(req,res){const id=parseInt(req.body.id),product=db.prepare("SELECT * FROM products WHERE id = ?").get(id);if(!product)return res.status(404).json({status:"error",message:"Product not found"});addItem(req,product,parseInt(req.body.qty||1)),res.status(200).json({status:"success"})}function addItem(req,product,qty=1){initCart(req);const cart=req.session.cart,existing=cart.find((item=>item.id===product.id));existing?existing.qty+=qty:cart.push({id:product.id,name:product.name,price:product.price,image:product.image,qty:qty})}function removeFromCart(req,res){removeItem(req,parseInt(req.params.id)),res.status(200).json({status:"success"})}function removeItem(req,productId){initCart(req),req.session.cart=req.session.cart.filter((item=>item.id!==productId))}function updateQty(req,productId,qty){initCart(req);const item=req.session.cart.find((i=>i.id===productId));item&&(item.qty=qty)}function getCart(req){return initCart(req),req.session.cart}function getTotal(req){return initCart(req),req.session.cart.reduce(((sum,item)=>sum+item.price*item.qty),0)}module.exports={CartTemplate:CartTemplate,initCart:initCart,addToCart:addToCart,removeFromCart:removeFromCart,updateQty:updateQty,getCart:getCart,getTotal:getTotal};