const path=require("path"),fs=require("fs"),sharp=require("sharp"),multer=require("multer"),{db:db}=require("../../../../db.js"),projectRoot=path.join(__dirname,"../../../.."),imgDir=path.join(projectRoot,"/public/images");function createUniqueFolder(baseName){let folderName=baseName,folderPath=path.join(imgDir,folderName),counter=1;for(;fs.existsSync(folderPath);)folderName=`${baseName}(${counter++})`,folderPath=path.join(imgDir,folderName);return fs.mkdirSync(folderPath,{recursive:!0}),{folderPath:folderPath,folderName:folderName}}fs.existsSync(imgDir)||fs.mkdirSync(imgDir,{recursive:!0});const storage=multer.diskStorage({destination:(req,file,cb)=>{var ext=path.extname(file.originalname).toLowerCase();const baseName=path.basename(file.originalname,ext)||"image",{folderPath:folderPath,folderName:folderName}=createUniqueFolder(baseName);req.uploadFolder=folderPath,file.folderName=folderName,file.ext=ext,cb(null,req.uploadFolder)},filename:(req,file,cb)=>{cb(null,"image"+path.extname(file.originalname))}}),upload=multer({storage:storage,limits:{fileSize:5242880},fileFilter:(req,file,cb)=>{const allowedTypes=/jpeg|jpg|png|gif|webp/,extname=allowedTypes.test(path.extname(file.originalname).toLowerCase()),mimetype=allowedTypes.test(file.mimetype);extname&&mimetype?cb(null,!0):cb(new Error("Only image files are allowed (jpg, png, webp, gif)."))}});function getMediaHTML(req,res){console.log(req),res.render("./backend/pages/media_manager/index",{title:"Media Manager",layout:"backend/layout/main"})}function getMediasJSON(req,res){const medias=db.prepare("SELECT id, name, '/static/images/'|| name ||'/thumb'|| ext AS path FROM media WHERE deleted_yn =0").all();res.json(medias)}function addMedia(req,res){upload.array("images",10)(req,res,(async err=>{if(err)return res.status(400).json({status:"error",message:err.message});const uploadedFiles=[];req.files.forEach((file=>{const{width:width,height:height}=sharp(file.path).metadata(),row=db.prepare("\n            INSERT INTO media (name, type, width, height, ext, create_at, deleted_yn, create_by_userid) \n            VALUES (:name, :type, :width, :height, :ext, CURRENT_TIMESTAMP, 0, :userid) \n            RETURNING id;\n      ").get({name:file.folderName,type:"image",width:width,height:height,ext:file.ext,userid:req.user.id});shapeImage(file),uploadedFiles.push({id:row.id,name:file.folderName,path:`/static/images/${file.folderName}/image${file.ext}`})})),res.status(200).json({status:"success",images:uploadedFiles})}))}function removeMedia(req,res){const{id:id}=req.body;db.prepare("\n    UPDATE media SET deleted_by_userid=:userid, deleted_at=CURRENT_TIMESTAMP, deleted_yn=1\n    WHERE id=:mediaid\n    RETURNING id;\n    ").get({mediaid:id,userid:req.user.id})?res.json({status:"success",message:"images are removes"}):res.json({status:"error",message:"Somthing went wrong, please try again later."})}async function shapeImage(file){const sizes={large:{width:1920},medium:{width:600},thumb:{width:150}};for(key in sizes){const thumbFull=path.join(file.destination,key+file.ext);await sharp(file.path).resize(sizes[key]).toFile(thumbFull)}}module.exports={getMediaHTML:getMediaHTML,getMediasJSON:getMediasJSON,addMedia:addMedia,removeMedia:removeMedia,removeMedia:removeMedia};