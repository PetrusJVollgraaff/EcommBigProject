const{db:db}=require("../../../../db.js"),{body:body,validationResult:validationResult}=require("express-validator"),producValidator=[body("product_name").trim().notEmpty().withMessage("Product Name required"),body("product_code").trim().notEmpty().withMessage("Product Code required"),body("product_stock").isInt({min:0}).notEmpty(),body("main_mediaid").isInt({min:0}).notEmpty(),body("price_normal").isFloat({min:0}).notEmpty(),body("product_description").trim()];var productSQL="\n        SELECT \n          P.id, \n          P.name, \n          P.onspecial,\n          P.showonline,\n          CASE \n              WHEN M.id IS NOT NULL THEN\n                  '/static/images/'|| M.name ||'/thumb'|| M.ext\n              ELSE ''\n          END AS path \n\n      FROM products AS P\n      LEFT JOIN media_used MU ON MU.id = P.mediaused_id AND MU.deleted_yn=0\n      LEFT JOIN media M ON M.id = MU.media_id AND M.deleted_yn=0\n      WHERE P.deleted_yn = 0 \n    ",productDetailSQL="\n        SELECT \n          P.id, \n          P.name, \n          P.description,\n          P.code,\n          P.instock,\n          P.onspecial,\n          P.showonline,\n          \n          --product main image\n          IFNULL(M.id, 0) AS imgid,\n          IFNULL(MU.id, 0) AS imgusedid,\n          CASE \n              WHEN M.id IS NOT NULL THEN\n                  '/static/images/'|| M.name ||'/thumb'|| M.ext\n              ELSE ''\n          END AS imgpath,\n\n          --product normal prices\n          IFNULL(PP1.id, 0) AS normalpriceid,\n          IFNULL(PP1.price, 0.00) as normalprice,\n      \n          --product special prices\n          IFNULL(PP2.id, 0) AS specialpriceid,\n          IFNULL(PP2.price, 0.00) as specialprice,\n          PP2.specialdateStart,\n          PP2.specialdateEnd\n\n      FROM products AS P\n      LEFT JOIN media_used MU ON MU.id = P.mediaused_id AND MU.deleted_yn=0\n      LEFT JOIN media M ON M.id = MU.media_id AND M.deleted_yn=0\n      LEFT JOIN product_prices PP1 ON PP1.products_id = P.id AND PP1.isspecial=0 AND PP1.deleted_yn = 0\n      LEFT JOIN product_prices PP2 ON PP2.products_id = P.id AND PP2.isspecial=1 AND PP2.deleted_yn = 0          \n      WHERE P.deleted_yn = 0 AND P.id=:id\n    ";function getproductHTML(req,res){res.render("./backend/pages/product_manager/index",{title:"Media Manager",layout:"backend/layout/main"})}function getProductsJSON(req,res){const productsDb=db.prepare(productSQL).all(),products=[];for(const product of productsDb)products.push(setProductJSON(product));res.json(products)}function getSingleProduct(req,res){const{id:id}=req.body;if(0==id)res.render("./backend/pages/product_manager/editor",{title:"",product:{}});else{const row=db.prepare(productDetailSQL).get({id:id});if(!row)return res.status(404).json({status:"error",message:"Product not found"});const product={id:row.id,name:row.name,code:row.code,descript:row.description,onspecial:1==row.onspecial,showonline:1==row.showonline,imageid:row.imgid,imagepath:row.imgpath,pricenormal:row.normalprice,pricespecial:row.specialprice,specialdatestart:row.specialdateStart,specialdateend:row.specialdateEnd};res.render("./backend/pages/product_manager/editor",{title:"",product:product})}}function addNewProduct(req,res){const errors=validationResult(req);if(!errors.isEmpty())return res.status(400).json({status:"error",message:errors.array()});var id=addNewProductSQL(req.body);if(id>0){const product=getProductJSON(id);res.status(200).json({status:"success",message:"Product is added",product:product})}res.status(500).json({status:"error",message:"Somthing went wrong, Product could not be created"})}function editExistingProduct(req,res){const errors=validationResult(req);if(!errors.isEmpty())return res.status(400).json({status:"error",message:errors.array()});const{product_id:product_id}=req.body,row=db.prepare(productDetailSQL).get({id:product_id});if(row){if(UpdateProduct(req.body,row.imgid,row.imgusedid,row.normalprice,row.specialprice)){const product=getProductJSON(product_id);res.status(200).json({status:"success",message:"Product is Save.",product:product})}res.status(500).json({status:"error",message:"Somthing went wrong, Product could not be created"})}res.status(404).json({status:"error",message:"Product not found."})}function removeExistingProduct(req,res){const{id:id}=req.body;db.prepare("\n    UPDATE products SET deleted_at=CURRENT_TIMESTAMP, deleted_yn=1, deleted_by_userid=1\n    WHERE id=:mediaid\n    RETURNING id;\n    ").get(id)?res.json({status:"success",message:"Product is removed."}):res.json({status:"error",message:"Somthing went wrong, please try again later."})}function getProductJSON(id){return setProductJSON(db.prepare(productSQL+" AND P.id=:id").get({id:id}))}function setProductJSON(row){return{id:row.id,name:row.name,onspecial:row.onspecial,showonline:row.showonline,image:{path:row.path}}}function AddImgSQL(imgid){return db.prepare("\n            INSERT INTO media_used ([media_id], [media_order], [function_as], [create_by_userid], [create_at], [deleted_yn])\n                VALUES (:imgid, 0, 'main product image', 1, CURRENT_TIMESTAMP, 0)\n                RETURNING id;\n      ").get({imgid:imgid}).id}function AddNewPriceSQL(productid,body){const{price_normal:price_normal}=body;db.prepare("\n        INSERT INTO product_prices ([products_id], [price], [isspecial], [create_by_userid], [create_at], [deleted_yn])\n        VALUES(:productid, :price, 0, 1, CURRENT_TIMESTAMP, 0)\n      ").run({productid:productid,price:price_normal})}function AddNewSpecialPriceSQL(productid,body){const{product_special:product_special,price_special:price_special,special_datestart:special_datestart,special_dateend:special_dateend}=body;if(void 0!==product_special){db.prepare("\n        INSERT INTO product_prices ([products_id], [price], [isspecial], [specialdataStart], [specialdataEnd], [create_by_userid], [create_at], [deleted_yn])\n        VALUES(:productid, :price, 1, :datestart, :dateend, 1, CURRENT_TIMESTAMP, 0)\n      ").run({productid:productid,price:price_special,datestart:special_datestart,dateend:special_dateend})}}function addNewProductSQL(body){const{main_mediaid:main_mediaid,product_name:product_name,product_stock:product_stock,product_description:product_description,product_code:product_code,product_special:product_special,product_show:product_show}=body;let mediausedId=AddImgSQL(main_mediaid);const row=db.prepare("\n    INSERT INTO products([mediaused_id], [name], [instock], [description], [code], [onspecial], [showonline], [create_by_userid], [create_at], [deleted_yn])\n    VALUES (:mediausedid, :name, :stock, :descript, :code, :onspecial, :showonline, 1, CURRENT_TIMESTAMP, 0)\n    RETURNING id;\n      ").get({mediausedid:mediausedId,name:product_name,stock:product_stock,descript:product_description,code:product_code,onspecial:void 0===product_special?0:1,showonline:void 0===product_show?0:1});return row?(AddNewPriceSQL(row.id,body),AddNewSpecialPriceSQL(row.id,body),row.id):0}function ReplaceExistingImg(productid,newimgid,oldimgid,oldimgusedid){const usedimgid=oldimgusedid;if(newimgid!=oldimgid){usedimgid=db.prepare("\n            INSERT INTO media_used ([media_id], [media_order], [function_as], [create_by_userid], [create_at], [deleted_yn])\n            SELECT :imgid, 0, 'main product image', 1, CURRENT_TIMESTAMP, 0\n                WHERE NOT EXISTS (\n                    SELECT 1\n                    FROM products AS P\n                    LEFT JOIN media_used MU ON MU.id = P.mediaused_id AND MU.deleted_yn=0\n                    LEFT JOIN medias M ON M.id = MU.media_id AND M.deleted_yn=0\n                    WHERE P.deleted_yn = 0 AND P.id=:productid AND IFNULL(M.id, 0)=:imgid\n                )\n              RETURNING id;\n      ").get({imgid:imgid,productid:productid}).id}return usedimgid}function ReplaceExistingPrice(productid,body,curnormprice){const{price_normal:price_normal}=body;if(price_normal!=curnormprice){db.prepare("\n            INSERT INTO product_prices ([products_id], [price], [isspecial], [create_by_userid], [create_at], [deleted_yn])\n                SELECT :productid, :price, 0, 1, CURRENT_TIMESTAMP, 0\n                WHERE NOT EXISTS (\n                    SELECT 1\n                    FROM products AS P\n                    LEFT JOIN product_prices PP1 ON PP1.products_id = P.id AND PP1.isspecial=0 AND PP1.deleted_yn = 0\n                    WHERE P.deleted_yn = 0 AND P.id=:productid AND IFNULL(PP1.price, 0)=:price\n                )\n                RETURNING id;\n      ").run({productid:productid,price:price_normal})}}function ReplaceExistingSpecialPrice(productid,body,curspecialprice){const{product_special:product_special,price_special:price_special,special_datestart:special_datestart,special_dateend:special_dateend}=body;if(void 0!==product_special){if(price_special!=curspecialprice){var row=db.prepare("\n            INSERT INTO product_prices ([products_id], [price], [isspecial], [create_by_userid], [create_at], [deleted_yn])\n                SELECT :productid, :price, 0, 1, CURRENT_TIMESTAMP, 0\n                WHERE NOT EXISTS (\n                    SELECT 1\n                    FROM products AS P\n                    LEFT JOIN product_prices PP1 ON PP1.products_id = P.id AND PP1.isspecial=0 AND PP1.deleted_yn = 0\n                    WHERE P.deleted_yn = 0 AND P.id=:productid AND IFNULL(PP1.price, 0)=:price\n                )\n                RETURNING id;\n      ").get({productid:productid,price:price_special});db.prepare("\n            UPDATE product_prices SET [deleted_yn] = 1, [deleted_at]=CURRENT_TIMESTAMP\n            WHERE products_id = :productid AND isspecial=0 AND deleted_yn = 0 AND id!=:id\n      ").run({productid:productid,id:row.id})}}else{db.prepare("\n          UPDATE product_prices SET [deleted_yn] = 1, [deleted_at]=CURRENT_TIMESTAMP\n          WHERE products_id=:productid AND isspecial=1 AND deleted_yn = 0\n      ").run({productid:productid})}}function UpdateProduct(body,curimgid,curimgusedid,curnormprice,curspecialprice){const{main_mediaid:main_mediaid,product_id:product_id,product_name:product_name,product_stock:product_stock,product_description:product_description,product_code:product_code,product_special:product_special,product_show:product_show}=body;let mediausedId=ReplaceExistingImg(product_id,main_mediaid,curimgid,curimgusedid);ReplaceExistingPrice(product_id,body,curnormprice),ReplaceExistingSpecialPrice(product_id,body,curspecialprice);return!!db.prepare("\n      UPDATE products SET [name]=:name, [instock]=:instock, [description]=:descript, [code]=:code, \n              [onspecial]=:onspecial, [showonline]=:showonline, [mediaused_id]=:mediausedid\n      WHERE id=:id\n      RETURNING id;\n  ").get({id:product_id,mediausedid:mediausedId,name:product_name,instock:product_stock,descript:product_description,code:product_code,onspecial:void 0===product_special?0:1,showonline:void 0===product_show?0:1})}module.exports={producValidator:producValidator,getproductHTML:getproductHTML,getProductsJSON:getProductsJSON,getSingleProduct:getSingleProduct,addNewProduct:addNewProduct,editExistingProduct:editExistingProduct,removeExistingProduct:removeExistingProduct};